import string
import secrets  # More secure than random
from typing import Tuple

try:
    import pyperclip
    clipboard_available = True
except ImportError:
    clipboard_available = False


def get_password_length() -> int:
    """Prompt user for password length between 8 and 32."""
    while True:
        try:
            length = int(input("Enter password length (8-32): "))
            if 8 <= length <= 32:
                return length
            print("Length should be between 8 and 32.")
        except ValueError:
            print("Enter a valid number.")


def choose_characters() -> Tuple[str, list]:
    """Ask user which character sets to include and return combined pool + list of chosen sets."""
    print("\nChoose character types to include in your password:")
    include_upper = input("Include uppercase letters? (y/n): ").lower() == "y"
    include_lower = input("Include lowercase letters? (y/n): ").lower() == "y"
    include_digits = input("Include digits? (y/n): ").lower() == "y"
    include_symbols = input("Include symbols? (y/n): ").lower() == "y"

    if not (include_upper or include_lower or include_digits or include_symbols):
        print("You must select at least one character type!")
        return choose_characters()

    chosen_sets = []
    chars = ""
    if include_upper:
        chosen_sets.append(string.ascii_uppercase)
        chars += string.ascii_uppercase
    if include_lower:
        chosen_sets.append(string.ascii_lowercase)
        chars += string.ascii_lowercase
    if include_digits:
        chosen_sets.append(string.digits)
        chars += string.digits
    if include_symbols:
        chosen_sets.append(string.punctuation)
        chars += string.punctuation

    return chars, chosen_sets


def evaluate_strength(password: str) -> str:
    """Evaluate password strength based on length and diversity of characters."""
    length = len(password)
    score = 0

    if any(c.islower() for c in password): score += 1
    if any(c.isupper() for c in password): score += 1
    if any(c.isdigit() for c in password): score += 1
    if any(c in string.punctuation for c in password): score += 1

    if length >= 16 and score >= 3:
        return "Very Strong"
    elif length >= 12 and score >= 3:
        return "Strong"
    elif length >= 10 and score >= 2:
        return "Moderate"
    else:
        return "Weak"


def generate_password() -> str:
    """Generate a secure password including at least one character from each selected set."""
    print("\n--- Password Generator ---")
    length = get_password_length()
    chars, chosen_sets = choose_characters()

    # Ensure all chosen categories are represented at least once
    password = [secrets.choice(charset) for charset in chosen_sets]

    # Fill the rest of the password
    while len(password) < length:
        password.append(secrets.choice(chars))

    # Shuffle result securely
    secrets.SystemRandom().shuffle(password)
    result = "".join(password)

    print(f"\nGenerated Password: {result}")
    print(f"Password Strength: {evaluate_strength(result)}")

    if clipboard_available:
        pyperclip.copy(result)
        print("Password copied to clipboard!")

    # Ask user if they want to save
    save = input("Save this password to a file? (y/n): ").lower()
    if save == "y":
        with open("saved_passwords.txt", "a") as f:
            f.write(result + "\n")
        print("Password saved to 'saved_passwords.txt'.")

    return result


def main() -> None:
    """Main loop for password generator."""
    print("Welcome to the Secure Password Generator!\n")
    while True:
        generate_password()
        again = input("\nGenerate another password? (y/n): ").lower()
        if again != "y":
            print("Goodbye!")
            break


if __name__ == "__main__":
    main()
