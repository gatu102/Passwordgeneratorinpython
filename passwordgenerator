import tkinter as tk
from tkinter import messagebox, filedialog
import random
import string

# Optional clipboard support
try:
    import pyperclip
    CLIPBOARD_AVAILABLE = True
except ImportError:
    CLIPBOARD_AVAILABLE = False

# Ambiguous characters to avoid if user chooses
AMBIGUOUS = "O0l1I"


def evaluate_strength(password: str) -> str:
    """
    Evaluate password strength based on length and diversity of character sets.
    Returns: "Weak", "Moderate", or "Strong".
    """
    length = len(password)
    categories = sum([
        any(c.islower() for c in password),
        any(c.isupper() for c in password),
        any(c.isdigit() for c in password),
        any(c in string.punctuation for c in password),
    ])

    if length >= 12 and categories >= 3:
        return "Strong"
    elif length >= 10 and categories >= 2:
        return "Moderate"
    return "Weak"


def get_strength_color(strength: str) -> str:
    """Return color for strength label."""
    return {"Strong": "green", "Moderate": "orange"}.get(strength, "red")


def build_charset() -> str:
    """Build character set based on user selections."""
    chars = ""
    if upper_var.get():
        chars += string.ascii_uppercase
    if lower_var.get():
        chars += string.ascii_lowercase
    if digits_var.get():
        chars += string.digits
    if symbols_var.get():
        chars += string.punctuation

    if exclude_var.get():
        chars = ''.join(c for c in chars if c not in AMBIGUOUS)

    return chars


def create_password(length: int, chars: str) -> str:
    """Generate a single random password."""
    return ''.join(random.choice(chars) for _ in range(length))


def generate_passwords():
    """Generate one or multiple passwords based on user input."""
    try:
        length = int(length_entry.get())
        count = int(count_entry.get())
        if not (8 <= length <= 32 and count >= 1):
            raise ValueError
    except ValueError:
        messagebox.showerror("Error", "Password length must be 8‚Äì32, count ‚â• 1.")
        return

    chars = build_charset()
    if not chars:
        messagebox.showerror("Error", "Select at least one character type!")
        return

    password_list.delete(0, tk.END)  # Clear old passwords
    for _ in range(count):
        password = create_password(length, chars)
        strength = evaluate_strength(password)
        password_list.insert(tk.END, password)
        password_list.itemconfig(tk.END, {'fg': get_strength_color(strength)})

    # Auto-copy if only one password is generated
    if count == 1 and CLIPBOARD_AVAILABLE:
        pyperclip.copy(password_list.get(tk.END))


def generate_strong_password():
    """Quick-generate one strong password with recommended settings."""
    length_entry.delete(0, tk.END)
    length_entry.insert(0, "16")
    count_entry.delete(0, tk.END)
    count_entry.insert(0, "1")

    upper_var.set(True)
    lower_var.set(True)
    digits_var.set(True)
    symbols_var.set(True)
    exclude_var.set(True)

    generate_passwords()


def copy_selected():
    """Copy selected password to clipboard."""
    if not password_list.curselection():
        messagebox.showwarning("Warning", "Select a password first!")
        return

    password = password_list.get(password_list.curselection())
    if CLIPBOARD_AVAILABLE:
        pyperclip.copy(password)
        messagebox.showinfo("Copied", "Password copied to clipboard!")
    else:
        messagebox.showinfo("Clipboard Unavailable", "Install pyperclip to enable clipboard.")


def save_to_file():
    """Save all generated passwords to a text file."""
    if password_list.size() == 0:
        messagebox.showwarning("Warning", "No passwords to save!")
        return

    file_path = filedialog.asksaveasfilename(defaultextension=".txt",
                                             filetypes=[("Text files", "*.txt")])
    if not file_path:
        return

    with open(file_path, "w") as f:
        for i in range(password_list.size()):
            f.write(password_list.get(i) + "\n")

    messagebox.showinfo("Saved", f"Passwords saved to {file_path}")


# ------------------- GUI -------------------
root = tk.Tk()
root.title("üîê Password Generator & Manager")
root.geometry("650x520")
root.resizable(False, False)

# Input frame
input_frame = tk.Frame(root, padx=10, pady=5)
input_frame.pack(fill="x")

tk.Label(input_frame, text="Password Length (8‚Äì32):").pack(anchor="w")
length_entry = tk.Entry(input_frame, width=10)
length_entry.pack(anchor="w")
length_entry.insert(0, "12")

tk.Label(input_frame, text="Number of Passwords:").pack(anchor="w")
count_entry = tk.Entry(input_frame, width=10)
count_entry.pack(anchor="w")
count_entry.insert(0, "1")

# Options frame
options_frame = tk.LabelFrame(root, text="Options", padx=10, pady=5)
options_frame.pack(fill="x", padx=10, pady=5)

upper_var = tk.BooleanVar(value=True)
lower_var = tk.BooleanVar(value=True)
digits_var = tk.BooleanVar(value=True)
symbols_var = tk.BooleanVar(value=True)
exclude_var = tk.BooleanVar(value=False)

tk.Checkbutton(options_frame, text="Include Uppercase", variable=upper_var).pack(anchor="w")
tk.Checkbutton(options_frame, text="Include Lowercase", variable=lower_var).pack(anchor="w")
tk.Checkbutton(options_frame, text="Include Digits", variable=digits_var).pack(anchor="w")
tk.Checkbutton(options_frame, text="Include Symbols", variable=symbols_var).pack(anchor="w")
tk.Checkbutton(options_frame, text="Exclude Ambiguous (O0l1I)", variable=exclude_var).pack(anchor="w")

# Buttons
tk.Button(root, text="Generate Password(s)", command=generate_passwords).pack(pady=5)
tk.Button(root, text="Generate Strong Password (Recommended)", command=generate_strong_password).pack(pady=5)

# Password list with scrollbar
list_frame = tk.Frame(root)
list_frame.pack(pady=5)

scrollbar = tk.Scrollbar(list_frame)
scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

password_list = tk.Listbox(list_frame, width=75, height=15, yscrollcommand=scrollbar.set)
password_list.pack(side=tk.LEFT)
scrollbar.config(command=password_list.yview)

# Bottom buttons
tk.Button(root, text="Copy Selected", command=copy_selected).pack(pady=3)
tk.Button(root, text="Save All Passwords", command=save_to_file).pack(pady=3)

root.mainloop()
